# frozen_string_literal: true

require "test_helper"

describe "Jat::Plugins::JsonApi::Params::Include::Validate" do
  before { Jat::Plugins.find_plugin(:json_api) }

  let(:described_class) { Jat::Plugins::JsonApi::Params::Include::Validate }

  let(:base_class) { Class.new(Jat) { plugin :json_api } }
  let(:a_serializer) { Class.new(base_class) }
  let(:b_serializer) { Class.new(base_class) }

  before do
    ser = a_serializer
    ser.type :a
    ser.attribute :a1
    ser.relationship :a2, serializer: b_serializer
    ser.relationship :a3, serializer: b_serializer

    ser = b_serializer
    ser.type :b
    ser.attribute :b1
    ser.relationship :b2, serializer: a_serializer
  end

  it "does not raises error when all `include` values are valid" do
    include_param = {a2: {b2: {a2: {b2: {a2: {}}}}}, a3: {b2: {a2: {b2: {a2: {}}}}}}
    assert described_class.call(a_serializer, include_param)
  end

  it "raises error when some key is invalid" do
    error = assert_raises(Jat::Error) { described_class.call(a_serializer, foo: {}) }
    assert_equal "#{a_serializer} has no `foo` relationship", error.message
  end

  it "raises error when some children key is invalid" do
    error = assert_raises(Jat::Error) { described_class.call(a_serializer, a2: {foo: {}}) }
    assert_equal "#{b_serializer} has no `foo` relationship", error.message
  end

  it "raises error when trying to include attribute, not relationship" do
    error = assert_raises(Jat::Error) { described_class.call(a_serializer, a1: {}) }
    assert_equal "#{a_serializer} has no `a1` relationship", error.message
  end

  it "raises error when trying to include not existing nested attribute" do
    error = assert_raises(Jat::Error) { described_class.call(a_serializer, a2: {b1: {}}) }
    assert_equal "#{b_serializer} has no `b1` relationship", error.message
  end
end
